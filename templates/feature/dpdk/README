
	Intel Data Plane Development Kit (DPDK)

1. Overview
===========
Intel Data Plane Development Kit (DPDK) presents a solution for fast-path
network processing. DPDK allows you to make use of packet processing features
available on the latest Intel processors.

This README documents the use of the DPDK feature. We do not provide a
detailed description or usage details for DPDK, the Intel DPDK
documentation should be reviewed for this purpose. (http://dpdk.org/doc)

2. Build Configuration
======================
When the DPDK feature is included in your build, either via setup or
by editing local.conf, the resulting images will be configured to
support DPDK and include the DPDK userspace applications.

The DPDK feature will make the following changes to the target:
   * Target kernel configuration updates to support PCI MSI, HugeTLB and UIO
   * Target configuration updates to mount HugeTLB
(At the time of writing DPDK *only* supports 'linuxapp', no baremetal, it is
 worth noting that the DPDK feature will always prepare the target for
 'linuxapp' support regardless if you plan on using it or not)

In order to use the DPDK feature you must include the feature and meta-dpdk
layer in your call to setup.sh

   --templates=feature/dpdk --layers=meta-dpdk

(for an existing build you can add the DPDK feature by adding the template and layer
 to the build's local.conf and bblayers.conf, respectively)

Once the DPDK feature is included you can proceed with your normal build.

Note:
DPDK requires to walk through its process' address space via /proc/self/pagemap
to get its usage of physical memory. That exposes its process' address space and
its physical memory location to a kernel exploitation. Please review your
security policies to ensure this risk is mitigated if needed.

3. DPDK Linuxapp Setup
======================
A kernel module named vfio_pci.ko that must be inserted on the target prior to
executing DPDK processes:

	# modprobe vfio_pci

Bind Intel devices to vfio_pci:

	# ifconfig ethX down
	# /usr/bin/dpdk-devbind.py --bind=vfio-pci 07:00.0

NOTE: This test method need two intel ethernet (e1000e/igb/ixgbe) ports,
please do this step on each port.
07:00.0 is the PCI address, use lspci to get the real address.

Reserve huge pages memory:

	# mkdir -p /mnt/huge
	# mount -t hugetlbfs nodev /mnt/huge
	# echo 64 > /proc/sys/vm/nr_hugepages

Note the default number of huge pages for DPDK is 64, which may
be not enough for the tests related to memory. In this case, cat 1024
to /proc/sys/vm/nr_hugepages.

(you will most likely want to update your system configs to automate this
 to avoid the need to manually insert the module on each reboot)

The environment can be tested with:

       # /usr/bin/dpdk-test -c 0xffff -n 1

Alternatively you may run test with no options to get information on
available command line options. This will start a RTE shell which you
can then use the following commands to initiate the tests:

memory_autotest
per_lcore_autotest
spinlock_autotest
rwlock_autotest
atomic_autotest
byteorder_autotest
prefetch_autotest
cycles_autotest
logs_autotest
memzone_autotest
ring_autotest
mempool_autotest
mbuf_autotest
timer_autotest
malloc_autotest

You may choose to run 'all_autotests' in the RTE shell to run all the
autotests. Note that it may be required to increase the value of
/proc/sys/vm/nr_hugepages to complete these tests. Additionally,
eal_flags_autotest requires -m parameter with a correct value.

4. DPDK examples applications
=============================
Various DPDK example application are built along with DPDK. To include
these in your image add the 'dpdk-example' package to your image using
IMAGE_INSTALL_append or similar in your local.conf.

5. DPDK compilation with optimization
=====================================
DPDK supports compilation with optimization for a specific
machine. For best usage, please change set the definition of
DPDK_TARGET_MACHINE in your build's local.conf
(ie. DPDK_TARGET_MACHINE_pn-dpdk = "<target>". The available machines
are native(guessing current machine), atm(Intel Atom Processor),
nhm(Intel Nehalem Processor), wsm(Intel Westmere Processor), snb(Intel
Sandy Bridge Processor) and ivb(Intel Ivy Bridge Processor).  It is
not recommended to use "native" because it will guess the host machine
via /proc/cpuinfo against the real target machine.

6. Additional documentation
===========================
Additional READMEs relating to the DPDK can be found in the dpdk/docs directory.


#@TYPE: Wrtemplate
#@NAME: dpdk
#@DESCRIPTION: Enable Data Plane Development Kit (DPDK)
