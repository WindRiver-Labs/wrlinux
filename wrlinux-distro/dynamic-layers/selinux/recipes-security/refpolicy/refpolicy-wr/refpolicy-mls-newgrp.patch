Subject: [PATCH] refpolicy: add newgrp policy module

Upstream-Status: pending
 
Signed-off-by: Peter Seebach <peter.seebach@windriver.com>
Signed-off-by: Jackie Huang <jackie.huang@windriver.com>
---
 policy/modules/admin/newgrp.fc     |    3 +
 policy/modules/admin/newgrp.if     |  182 ++++++++++++++++++++++++++++++++++++
 policy/modules/admin/newgrp.te     |    9 ++
 policy/modules/roles/auditadm.te   |    4 +
 policy/modules/roles/secadm.te     |    4 +
 policy/modules/roles/staff.te      |    4 +
 policy/modules/roles/sysadm.te     |    4 +
 policy/modules/roles/unprivuser.te |    4 +
 8 files changed, 214 insertions(+)
 create mode 100644 policy/modules/admin/newgrp.fc
 create mode 100644 policy/modules/admin/newgrp.if
 create mode 100644 policy/modules/admin/newgrp.te

--- /dev/null
+++ refpolicy/policy/modules/admin/newgrp.fc
@@ -0,0 +1,3 @@
+/usr/bin/newgrp		--	gen_context(system_u:object_r:newgrp_exec_t,s0)
+/usr/bin/newgrp\.shadow	--	gen_context(system_u:object_r:newgrp_exec_t,s0)
+/usr/bin/sg		--	gen_context(system_u:object_r:newgrp_exec_t,s0)
--- /dev/null
+++ refpolicy/policy/modules/admin/newgrp.if
@@ -0,0 +1,182 @@
+## <summary>Execute a command with a substitute group</summary>
+
+#######################################
+## <summary>
+##	The role template for the newgrp module.
+## </summary>
+## <desc>
+##	<p>
+##	This template creates a derived domain which is allowed
+##	to change the linux group id, to run commands as a different
+##	group.
+##	</p>
+## </desc>
+## <param name="role_prefix">
+##	<summary>
+##	The prefix of the user role (e.g., user
+##	is the prefix for user_r).
+##	</summary>
+## </param>
+## <param name="user_role">
+##	<summary>
+##	The user role.
+##	</summary>
+## </param>
+## <param name="user_domain">
+##	<summary>
+##	The user domain associated with the role.
+##	</summary>
+## </param>
+#
+template(`newgrp_role_template',`
+
+	gen_require(`
+		type newgrp_exec_t;
+		attribute newgrpdomain;
+	')
+
+	##############################
+	#
+	# Declarations
+	#
+
+	type $1_newgrp_t, newgrpdomain; 
+	userdom_user_application_domain($1_newgrp_t, newgrp_exec_t)
+	domain_interactive_fd($1_newgrp_t)
+	domain_role_change_exemption($1_newgrp_t)
+	role $2 types $1_newgrp_t;
+
+	##############################
+	#
+	# Local Policy
+	#
+
+	# Use capabilities.
+	allow $1_newgrp_t self:capability { fowner setuid setgid dac_override sys_nice sys_resource };
+	allow $1_newgrp_t self:process ~{ ptrace setcurrent setexec setfscreate setrlimit execmem execstack execheap };
+	allow $1_newgrp_t self:process { setexec setrlimit };
+	allow $1_newgrp_t self:fd use;
+	allow $1_newgrp_t self:fifo_file rw_fifo_file_perms;
+	allow $1_newgrp_t self:shm create_shm_perms;
+	allow $1_newgrp_t self:sem create_sem_perms;
+	allow $1_newgrp_t self:msgq create_msgq_perms;
+	allow $1_newgrp_t self:msg { send receive };
+	allow $1_newgrp_t self:unix_dgram_socket create_socket_perms;
+	allow $1_newgrp_t self:unix_stream_socket create_stream_socket_perms;
+	allow $1_newgrp_t self:unix_dgram_socket sendto;
+	allow $1_newgrp_t self:unix_stream_socket connectto;
+	allow $1_newgrp_t self:key manage_key_perms;
+
+	allow $1_newgrp_t $3:key search;
+
+	# Enter this derived domain from the user domain
+	domtrans_pattern($3, newgrp_exec_t, $1_newgrp_t)
+
+	# By default, revert to the calling domain when a shell is executed.
+	corecmd_shell_domtrans($1_newgrp_t, $3)
+	corecmd_bin_domtrans($1_newgrp_t, $3)
+	allow $3 $1_newgrp_t:fd use;
+	allow $3 $1_newgrp_t:fifo_file rw_fifo_file_perms;
+	allow $3 $1_newgrp_t:process signal_perms;
+
+	kernel_read_kernel_sysctls($1_newgrp_t)
+	kernel_read_system_state($1_newgrp_t)
+	kernel_link_key($1_newgrp_t)
+
+	corecmd_read_bin_symlinks($1_newgrp_t)
+	corecmd_exec_all_executables($1_newgrp_t)
+
+	dev_getattr_fs($1_newgrp_t)
+	dev_read_urand($1_newgrp_t)
+	dev_rw_generic_usb_dev($1_newgrp_t)
+	dev_read_sysfs($1_newgrp_t)
+
+	domain_use_interactive_fds($1_newgrp_t)
+	domain_sigchld_interactive_fds($1_newgrp_t)
+	domain_getattr_all_entry_files($1_newgrp_t)
+
+	files_read_etc_files($1_newgrp_t)
+	files_read_var_files($1_newgrp_t)
+	files_read_usr_symlinks($1_newgrp_t)
+	files_getattr_usr_files($1_newgrp_t)
+	# for some PAM modules and for cwd
+	files_dontaudit_search_home($1_newgrp_t)
+	files_list_tmp($1_newgrp_t)
+
+	fs_search_auto_mountpoints($1_newgrp_t)
+	fs_getattr_xattr_fs($1_newgrp_t)
+
+	selinux_validate_context($1_newgrp_t)
+	selinux_compute_relabel_context($1_newgrp_t)
+
+	term_getattr_pty_fs($1_newgrp_t)
+	term_relabel_all_ttys($1_newgrp_t)
+	term_relabel_all_ptys($1_newgrp_t)
+
+	auth_run_chk_passwd($1_newgrp_t, $2)
+	# newgrp stores a token in the pam_pid directory
+	auth_manage_pam_pid($1_newgrp_t)
+	auth_use_nsswitch($1_newgrp_t)
+
+	auth_read_shadow($1_newgrp_t)
+
+	init_rw_utmp($1_newgrp_t)
+
+	logging_send_audit_msgs($1_newgrp_t)
+	logging_send_syslog_msg($1_newgrp_t)
+
+	miscfiles_read_localization($1_newgrp_t)
+
+	seutil_search_default_contexts($1_newgrp_t)
+	seutil_libselinux_linked($1_newgrp_t)
+
+	userdom_spec_domtrans_all_users($1_newgrp_t)
+	userdom_create_all_users_keys($1_newgrp_t)
+	userdom_manage_user_home_content_files($1_newgrp_t)
+	userdom_manage_user_home_content_symlinks($1_newgrp_t)
+	userdom_manage_user_tmp_files($1_newgrp_t)
+	userdom_manage_user_tmp_symlinks($1_newgrp_t)
+	userdom_use_user_terminals($1_newgrp_t)
+	# for some PAM modules and for cwd
+	userdom_dontaudit_search_user_home_content($1_newgrp_t)
+	userdom_dontaudit_search_user_home_dirs($1_newgrp_t)
+
+	ifdef(`hide_broken_symptoms', `
+		dontaudit $1_newgrp_t $3:socket_class_set { read write };
+	')
+
+	tunable_policy(`use_nfs_home_dirs',`
+		fs_manage_nfs_files($1_newgrp_t)
+	')
+
+	tunable_policy(`use_samba_home_dirs',`
+		fs_manage_cifs_files($1_newgrp_t)
+	')
+
+	optional_policy(`
+		dbus_system_bus_client($1_newgrp_t)
+	')
+
+	optional_policy(`
+		fprintd_dbus_chat($1_newgrp_t)
+	')
+
+')
+
+########################################
+## <summary>
+##	Send a SIGCHLD signal to the newgrp domain.
+## </summary>
+## <param name="domain">
+##	<summary>
+##	Domain allowed access.
+##	</summary>
+## </param>
+#
+interface(`newgrp_sigchld',`
+	gen_require(`
+		attribute newgrpdomain;
+	')
+
+	allow $1 newgrpdomain:process sigchld;
+')
--- /dev/null
+++ refpolicy/policy/modules/admin/newgrp.te
@@ -0,0 +1,9 @@
+policy_module(newgrp, 1.10.0)
+
+########################################
+#
+# Declarations
+attribute newgrpdomain;
+
+type newgrp_exec_t;
+application_executable_file(newgrp_exec_t)
--- refpolicy.orig/policy/modules/roles/auditadm.te
+++ refpolicy/policy/modules/roles/auditadm.te
@@ -56,6 +56,10 @@ optional_policy(`
 ')
 
 optional_policy(`
+	newgrp_role_template(auditadm, auditadm_r, auditadm_t)
+')
+
+optional_policy(`
 	sysadm_role_change(auditadm_r)
 ')
 
--- refpolicy.orig/policy/modules/roles/secadm.te
+++ refpolicy/policy/modules/roles/secadm.te
@@ -68,6 +68,10 @@ optional_policy(`
 ')
 
 optional_policy(`
+	newgrp_role_template(secadm, secadm_r, secadm_t)
+')
+
+optional_policy(`
 	sysadm_role_change(secadm_r)
 ')
 
--- refpolicy.orig/policy/modules/roles/staff.te
+++ refpolicy/policy/modules/roles/staff.te
@@ -47,6 +47,10 @@ optional_policy(`
 ')
 
 optional_policy(`
+	newgrp_role_template(staff, staff_r, staff_t)
+')
+
+optional_policy(`
 	sysadm_role_change(staff_r)
 	userdom_dontaudit_use_user_terminals(staff_t)
 ')
--- refpolicy.orig/policy/modules/roles/sysadm.te
+++ refpolicy/policy/modules/roles/sysadm.te
@@ -1063,6 +1063,10 @@ optional_policy(`
 ')
 
 optional_policy(`
+	newgrp_role_template(sysadm, sysadm_r, sysadm_t)
+')
+
+optional_policy(`
 	sysnet_run_ifconfig(sysadm_t, sysadm_r)
 	sysnet_run_dhcpc(sysadm_t, sysadm_r)
 ')
--- refpolicy.orig/policy/modules/roles/unprivuser.te
+++ refpolicy/policy/modules/roles/unprivuser.te
@@ -36,6 +36,10 @@ optional_policy(`
 	xserver_role(user_r, user_t)
 ')
 
+optional_policy(`
+	newgrp_role_template(user, user_r, user_t)
+')
+
 ifndef(`distro_redhat',`
 	optional_policy(`
 		auth_role(user_r, user_t)
