Upstream-Status: Pending

When openssl disable des with configure option 'no-des', it doesn't provide des
related header files and functions. That causes postgresql compile failed.

Fix it by checking macro OPENSSL_NO_DES to use openssl des related library
conditionaly.

Signed-off-by: Kai Kang <kai.kang@windriver.com>
---
diff --git a/contrib/pgcrypto/openssl.c b/contrib/pgcrypto/openssl.c
index 976af70..809d733 100644
--- a/contrib/pgcrypto/openssl.c
+++ b/contrib/pgcrypto/openssl.c
@@ -36,7 +36,9 @@
 #include <openssl/evp.h>
 #include <openssl/blowfish.h>
 #include <openssl/cast.h>
+#ifndef OPENSSL_NO_DES
 #include <openssl/des.h>
+#endif
 #include <openssl/rand.h>
 #include <openssl/err.h>
 
@@ -110,6 +112,7 @@ AES_cbc_encrypt(const uint8 *src, uint8 *dst, int len, AES_KEY *ctx, uint8 *iv,
 	}
 }
 
+#ifndef OPENSSL_NO_DES
 /*
  * Emulate DES_* API
  */
@@ -128,6 +131,7 @@ AES_cbc_encrypt(const uint8 *src, uint8 *dst, int len, AES_KEY *ctx, uint8 *iv,
 #define DES_ede3_cbc_encrypt(i, o, l, k1, k2, k3, iv, e) \
 		des_ede3_cbc_encrypt((i), (o), \
 				(l), *(k1), *(k2), *(k3), (iv), (e))
+#endif
 
 /*
  * Emulate newer digest API.
@@ -328,6 +332,7 @@ typedef struct
 			BF_KEY		key;
 			int			num;
 		}			bf;
+#ifndef OPENSSL_NO_DES
 		struct
 		{
 			DES_key_schedule key_schedule;
@@ -338,6 +343,7 @@ typedef struct
 						k2,
 						k3;
 		}			des3;
+#endif
 		CAST_KEY	cast_key;
 		AES_KEY		aes_key;
 	}			u;
@@ -511,6 +517,7 @@ bf_cfb64_decrypt(PX_Cipher *c, const uint8 *data, unsigned dlen, uint8 *res)
 	return 0;
 }
 
+#ifndef OPENSSL_NO_DES
 /* DES */
 
 static int
@@ -667,6 +674,7 @@ ossl_des3_cbc_decrypt(PX_Cipher *c, const uint8 *data, unsigned dlen,
 						 (DES_cblock *) od->iv, 0);
 	return 0;
 }
+#endif
 
 /* CAST5 */
 
@@ -878,6 +886,7 @@ static const struct ossl_cipher ossl_bf_cfb = {
 	64 / 8, 448 / 8, 1
 };
 
+#ifndef OPENSSL_NO_DES
 static const struct ossl_cipher ossl_des_ecb = {
 	ossl_des_init, ossl_des_ecb_encrypt, ossl_des_ecb_decrypt,
 	64 / 8, 64 / 8, 0
@@ -897,6 +906,7 @@ static const struct ossl_cipher ossl_des3_cbc = {
 	ossl_des3_init, ossl_des3_cbc_encrypt, ossl_des3_cbc_decrypt,
 	64 / 8, 192 / 8, 0
 };
+#endif
 
 static const struct ossl_cipher ossl_cast_ecb = {
 	ossl_cast_init, ossl_cast_ecb_encrypt, ossl_cast_ecb_decrypt,
@@ -931,10 +941,12 @@ static const struct ossl_cipher_lookup ossl_cipher_types[] = {
 	{"bf-cbc", &ossl_bf_cbc},
 	{"bf-ecb", &ossl_bf_ecb},
 	{"bf-cfb", &ossl_bf_cfb},
+#ifndef OPENSSL_NO_DES
 	{"des-ecb", &ossl_des_ecb},
 	{"des-cbc", &ossl_des_cbc},
 	{"des3-ecb", &ossl_des3_ecb},
 	{"des3-cbc", &ossl_des3_cbc},
+#endif
 	{"cast5-ecb", &ossl_cast_ecb},
 	{"cast5-cbc", &ossl_cast_cbc},
 	{"aes-ecb", &ossl_aes_ecb},
