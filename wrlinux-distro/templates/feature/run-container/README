#@TYPE: Wrtemplate
#@NAME: run-container
#@DESCRIPTION: build and include container images in rootfs images

Template feature/run-container
==============================

Template feature/run-container provides ability to build and include container
images in rootfs images. It builds container images along with building host
image such as wrlinux-image-std by bitbake mechanism multiconfig. Then create
docker images from container images during first boot time and run them
afterwards.

In this template, it defines multiconfigs:

  BBMULTICONFIG = "wr-host wr-container"

and provides 2 configure files for these multiconfigs. The configure files
should be copied to ${TOPDIR}/conf/multiconfig and users could configure for
each multiconfig in the files.

It requires 3 variables to be configured globally:

* WR_CONTAINER_NAMES
* WR_CONTAINER_PRIORITIES
* WR_HOST_IMAGES

WR_CONTAINER_NAMES and WR_CONTAINER_PRIORITIES are associated. It should set them
with containers which are involved and their priorities. Images set in
WR_HOST_IMAGES could be built as host images to include container images.

It reads configure file /etc/wr-containers/containers.conf and 2 variables are
supported for now:

* WR_DOCKER_PARAMS: parameters pass to docker for containers
* WR_DOCKER_START_COMMAND: default value is /bin/bash

it also supports config for single container:
* WR_DOCKER_PARAMS_${container_name}
* WR_DOCKER_START_COMMAND_${container_name}

they will override corresponding variable such as WR_DOCKER_PARAMS for specified
container.

When configure file updated, new containers will be started with new
configures. Old containers are deprecated but still exists and renamed with
current date and time in case users still need them.


Use Case
========
It demonstrates with eixsting container recipes from layer wrlinux.

1. Setup a project with template feature/run-container

$ setup.sh --machines qemux86-64 --distro wrlinux --templates feature/run-container --dl-layers


2. Set required variables in local.conf
Take existing container recipes wr-app-container and wr-systemd-container as example.

$ source oe-init-build-env
$ cat >>conf/local.conf <<EOF
WR_CONTAINER_NAMES = "wr-app-container wr-systemd-container"
WR_CONTAINER_PRIORITIES = "50 100"
WR_HOST_IMAGES = "wrlinux-image-std"

# Following are required by example containers
WR_APP_CONTAINER_APP = "bash"
WR_SYSTEMD_CONTAINER_APPS = "apache2"

# Set 5G free disk space with these example containers ONLY for qemu images
IMAGE_ROOTFS_EXTRA_SPACE = "5242880"

# Following configs are for demonstration and optional
WR_DOCKER_PARAMS = '-v /opt:/mnt'
WR_DOCKER_START_COMMAND = '/bin/sh'

WR_DOCKER_PARAMS_wr-app-container = ''
WR_DOCKER_START_COMMAND_wr-systemd-container = "/bin/bash"
EOF

Note:
-----
i. This approach works when building additional container images, as documented
in "Creating Additional Containers" in the Wind River Linux documentation. In
this case the WR_CONTAINER_NAMES must reflect the appropriate container names
given to these containers and WR_APP_CONTAINER_APP or WR_SYSTEMD_CONTAINER_APPS
are not required.

ii. For qemu images, it needs to set enough free disk space in the images that
docker needs a lot of space according to containers set in WR_CONTAINER_NAMES.
For this example, it suggests to have 5 Gbytes extra free disk space.


3. Copy multiconfig files resides in this template directory

$ cp -r $THIS_TEMPLATE_PATH/files/multiconfig conf/


4. Build and boot host image set in WR_HOST_IMAGES

It calls command runqemu to boot qemu images. Because variable 'TMPDIR' is set in reference multiconfig config file wr-host.conf and runqemu can't detect it automatically, image file path must be appended to runqemu parameters.

$ bitbake mc:wr-host:wrlinux-image-std
$ runqemu qemux86-64 kvm nographic qemuparams='-m 2048' tmp-host-glibc/deploy/images/qemux86-64/wrlinux-image-std-qemux86-64.ext4


5 Check docker images created and started according to config of WR_CONTAINER_NAMES and WR_CONTAINER_PRIORITIES

root@qemux86-64:~# docker ps
CONTAINER ID    IMAGE                  COMMAND        CREATED           STATUS          PORTS    NAMES
2fbee363bf51    wr-app-container       "/bin/bash"    11 seconds ago    Up 10 seconds            wr-app-container
4fa1e4122486    wr-systemd-container   "/bin/bash"    40 seconds ago    Up 38 seconds            wr-systemd-container

Then the containers could be attached and work on them. It could check settings
of WR_DOCKER_PARAMS and WR_DOCKER_START_COMMAND work by following commands:

root@qemux86-64:~# docker attach wr-systemd-container
bash-5.0# ps
    PID TTY          TIME CMD
      1 pts/0    00:00:00 bash
      6 pts/0    00:00:00 ps
bash-5.0# ls /mnt/
containerd  wr-containers
bash-5.0#


Known Issue
===========
Because command docker is just a client for interacting with the daemon
dockerd, it is impossible to create docker images with 'docker import' during
do_rootfs. Then it may cost a lot of time depends on how many containers have
been configured.
