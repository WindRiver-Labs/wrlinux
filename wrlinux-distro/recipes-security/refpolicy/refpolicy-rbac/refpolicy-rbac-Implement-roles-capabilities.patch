From e46d6e6c9d5e99873dedbe07010788c34931fd1a Mon Sep 17 00:00:00 2001
From: Xin Ouyang <Xin.Ouyang@windriver.com>
Date: Thu, 5 Apr 2012 13:34:26 +0800
Subject: [PATCH 1/4] refpolicy-rbac: Implement roles capabilities.

Define the roles and types, give the types the needed capabilities,
Using role allow rules to specify which roles are allowed to change
to other roles.

Upstream-Status: Inappropriate [no upstream]
---
 policy/modules/roles/hierarchrole.fc |    1 +
 policy/modules/roles/hierarchrole.if |    2 +
 policy/modules/roles/hierarchrole.te |   97 ++++++++++++++++++++++++++++++++++
 3 files changed, 100 insertions(+), 0 deletions(-)
 create mode 100644 policy/modules/roles/hierarchrole.fc
 create mode 100644 policy/modules/roles/hierarchrole.if
 create mode 100644 policy/modules/roles/hierarchrole.te

diff --git a/policy/modules/roles/hierarchrole.fc b/policy/modules/roles/hierarchrole.fc
new file mode 100644
index 0000000..601a7b0
--- /dev/null
+++ b/policy/modules/roles/hierarchrole.fc
@@ -0,0 +1 @@
+# file contexts handled by userdomain and genhomedircon
diff --git a/policy/modules/roles/hierarchrole.if b/policy/modules/roles/hierarchrole.if
new file mode 100644
index 0000000..a84b80f
--- /dev/null
+++ b/policy/modules/roles/hierarchrole.if
@@ -0,0 +1,2 @@
+## <summary>General system administration role</summary>
+
diff --git a/policy/modules/roles/hierarchrole.te b/policy/modules/roles/hierarchrole.te
new file mode 100644
index 0000000..bf675b8
--- /dev/null
+++ b/policy/modules/roles/hierarchrole.te
@@ -0,0 +1,97 @@
+policy_module(hierarchrole, 1.0.0)
+
+########################################
+#
+# Declare engineer role and type
+#
+
+role engineer_r;
+userdom_restricted_user_template(engineer)
+
+# Chcat will access /selinux/mls whose type is security_t, the interface
+# of selinux_get_enforce_mode will give the same permission to caller.
+selinux_get_enforce_mode(engineer_t)
+
+# Allow engineer_t to chcat files under /tmp/
+relabel_files_pattern(engineer_t, {tmp_t user_tmp_t}, user_tmp_t)
+
+seutil_run_newrole(engineer_t, engineer_r)
+
+#########################################
+#
+# Declare senior engineer
+#
+
+role senior_engineer_r;
+userdom_restricted_user_template(senior_engineer)
+
+selinux_get_enforce_mode(senior_engineer_t)
+relabel_files_pattern(senior_engineer_t, {tmp_t user_tmp_t}, user_tmp_t)
+
+seutil_domtrans_newrole(senior_engineer_t)
+dominance { role senior_engineer_r {role engineer_r;} }
+
+# netutils_run_ping should be wrapped by optional_policy macro,
+# since the netutils not is always included in the base policy.
+# but the use of optional_policy will block the role dominance work, so
+# do not use it
+
+netutils_run_ping(senior_engineer_t,senior_engineer_r)
+
+# Allow the role of senior engineer to newrole to engineer role
+allow senior_engineer_r engineer_r;
+
+#########################################
+#
+# Declare manager
+#
+
+role manager_r;
+userdom_restricted_user_template(manager)
+
+selinux_get_enforce_mode(manager_t)
+relabel_files_pattern(manager_t, {tmp_t user_tmp_t}, user_tmp_t)
+
+seutil_domtrans_newrole(manager_t)
+netutils_domtrans_ping(manager_t)
+dominance { role manager_r {role senior_engineer_r;} }
+
+optional_policy(`
+	su_role_template(manager, manager_r, manager_t)
+')
+
+optional_policy(`
+	netutils_run_traceroute(manager_t, manager_r)
+')
+
+allow manager_r senior_engineer_r;
+allow manager_r engineer_r;
+
+#########################################
+#
+# Declare technical leader
+#
+
+role technical_lead_r ;
+userdom_restricted_user_template(technical_lead)
+
+selinux_get_enforce_mode(technical_lead_t)
+relabel_files_pattern(technical_lead_t, {tmp_t user_tmp_t}, user_tmp_t)
+
+seutil_domtrans_newrole(technical_lead_t)
+netutils_domtrans_ping(technical_lead_t)
+dominance { role technical_lead_r {role senior_engineer_r;} }
+
+selinux_get_fs_mount(technical_lead_t)
+selinux_validate_context(technical_lead_t)
+selinux_compute_access_vector(technical_lead_t)
+selinux_compute_create_context(technical_lead_t)
+selinux_compute_relabel_context(technical_lead_t)
+selinux_compute_user_contexts(technical_lead_t)
+
+optional_policy(`
+	su_role_template(technical_lead, technical_lead_r, technical_lead_t)
+')
+
+allow technical_lead_r senior_engineer_r;
+allow technical_lead_r engineer_r;
-- 
1.7.5.4

