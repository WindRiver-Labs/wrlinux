Upstream-Status: Pending

Signed-off-by: Kai Kang <kai.kang@windriver.com>
---
Display summary of failed login attempts

The pam_lastlog module can display to the user the last time the
successfully authenticated to the system, but nobody displays a count of
failed authentication attempts.  Since pam_tally2 is in the best
position to report this, it being the one to keep this record, we'll
have it report it on a successful authentication.

Originally by: Signed-off-by: Joe MacDonald <joe.macdonald@windriver.com>
Signed-off-by: Jeff Polk <jeff.polk@windriver.com>

Index: Linux-PAM-1.1.6/modules/pam_tally2/pam_tally2.c
===================================================================
--- Linux-PAM-1.1.6.orig/modules/pam_tally2/pam_tally2.c
+++ Linux-PAM-1.1.6/modules/pam_tally2/pam_tally2.c
@@ -780,6 +780,8 @@ pam_sm_setcred(pam_handle_t *pamh, int f
     oldtime = 0;
   struct tally_options
     options, *opts = &options;
+  struct tallylog
+    tally;
   uid_t
     uid;
   const char
@@ -796,6 +798,24 @@ pam_sm_setcred(pam_handle_t *pamh, int f
   if ( tally_get_data(pamh, &oldtime, &tfile) != 0 )
   /* no data found */
       return PAM_SUCCESS;
+ 
+  /* Display faillog info.  Lastlog is handled by the lastlog module.  This
+   * isn't as clean as it could be, but no matter what we're going to end up
+   * with an inter-module dependency here unless we choose to let pam_tally2
+   * tell you what it knows and leaves lastlog to look after what it knows.
+   * Probably the right thing to do is simply move all of the lastlog logic in
+   * here, if we plan to send this up-stream. */
+  tally.fail_cnt=TALLY_HI; /* open tally file read-only for this operation */
+  rv = get_tally(pamh, uid, opts->filename, &tfile, &tally, opts->ctrl);
+  /* By this point, fail_cnt will actually be fail_cnt+1.  Seems to be because
+   * pam_sm_authenticate() always calls tally_bump() and maybe on a successful
+   * authentication it shouldn't. The problem is, pam_tally doesn't get involved
+   * in the auth process, it just steps in if someone shouldn't be allowed to
+   * authorize because of the current limits, so it never knows, until now, that
+   * someone has succeeded and it never hears about failures. */
+  if (tally.fail_cnt-1)
+          pam_info(pamh, _("%d unsuccessful attempt(s) since last login"),
+                   tally.fail_cnt-1);
 
   rv = tally_reset(pamh, uid, opts, tfile);
 
