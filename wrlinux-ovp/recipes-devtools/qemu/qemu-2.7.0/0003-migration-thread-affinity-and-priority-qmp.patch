From b01f284b98f3703cd1a8ce87b6f9ee9e2a3c77ac Mon Sep 17 00:00:00 2001
From: Mark Asselstine <mark.asselstine@windriver.com>
Date: Wed, 17 Dec 2014 19:27:52 +0000
Subject: [PATCH 10/18] migration thread affinity and priority qmp

This patch is rebased for qemu-2.4, based on Mark Asselstine's patch for
qemu-2.2

Signed-off-by: Yunguo Wei <yunguo.wei@windriver.com>
[Adjust code context
 "input_" has been removed from qmp_marshal_input_migrate_set_thread_cpumask]
Upstream-Status: Pending
Signed-off-by: He Zhe <zhe.he@windriver.com>
---
 hmp-commands.hx        | 33 ++++++++++++++++++++++++++++-
 hmp.c                  | 27 ++++++++++++++++++++++++
 hmp.h                  |  2 ++
 migration/migration.c  | 57 ++++++++++++++++++++++++++++++++++++++++++++++++++
 migration/trace-events |  1 +
 qapi-schema.json       | 30 ++++++++++++++++++++++++++
 qmp-commands.hx        | 48 ++++++++++++++++++++++++++++++++++++++++++
 7 files changed, 197 insertions(+), 1 deletion(-)

diff --git a/hmp-commands.hx b/hmp-commands.hx
index 848efee5..3a375560 100644
--- a/hmp-commands.hx
+++ b/hmp-commands.hx
@@ -1056,6 +1056,38 @@ once migration finished successfully.  Only implemented for SPICE.
 ETEXI
 
     {
+        .name       = "migrate_set_thread_cpumask",
+        .args_type  = "value:o",
+        .params     = "value",
+        .help       = "Set CPU mask for the migration thread."
+                      "Defaults to CPU 0 if no mask is specified",
+        .mhandler.cmd = hmp_migrate_set_thread_cpumask,
+    },
+
+STEXI
+@item migrate_set_thread_cpumask @var{value}
+@findex migrate_set_thread_cpumask
+Set CPU mask for the migration thread
+ETEXI
+
+    {
+        .name       = "migrate_set_thread_priority",
+        .args_type  = "value:o",
+        .params     = "value",
+        .help       = "Set real time priority for the the migration thread."
+	              "Defaults to no change migration thread priority if not"
+                      "specified or out of range. Range [1-99].Scheduling"
+                      "policy will always be- SCHED_FIFO",
+        .mhandler.cmd = hmp_migrate_set_thread_priority,
+    },
+
+STEXI
+@item migrate_set_thread_priority @var{value}
+@findex migrate_set_thread_priority
+Set real time priority for the the migration thread
+ETEXI
+
+    {
         .name       = "dump-guest-memory",
         .args_type  = "paging:-p,detach:-d,zlib:-z,lzo:-l,snappy:-s,filename:F,begin:i?,length:i?",
         .params     = "[-p] [-d] [-z|-l|-s] filename [begin length]",
@@ -1070,7 +1102,6 @@ ETEXI
         .mhandler.cmd = hmp_dump_guest_memory,
     },
 
-
 STEXI
 @item dump-guest-memory [-p] @var{filename} @var{begin} @var{length}
 @item dump-guest-memory [-z|-l|-s] @var{filename}
diff --git a/hmp.c b/hmp.c
index cc2056e9..e5072c97 100644
--- a/hmp.c
+++ b/hmp.c
@@ -1211,6 +1211,33 @@ void hmp_migrate_set_cache_size(Monitor *mon, const QDict *qdict)
     }
 }
 
+void hmp_migrate_set_thread_cpumask(Monitor *mon, const QDict *qdict)
+{
+    int64_t value = qdict_get_int(qdict, "value");
+    Error *err = NULL;
+    
+    qmp_migrate_set_thread_cpumask(value, &err);
+    if (err) {
+        monitor_printf(mon, "%s\n", error_get_pretty(err));
+        error_free(err);
+        return;
+    }
+}
+
+void hmp_migrate_set_thread_priority(Monitor *mon, const QDict *qdict)
+{
+    int64_t value = qdict_get_int(qdict, "value");
+    Error *err = NULL;
+     
+    
+    qmp_migrate_set_thread_priority(value, &err);
+    if (err) {
+        monitor_printf(mon, "%s\n", error_get_pretty(err));
+        error_free(err);
+        return;
+    }
+}
+
 void hmp_migrate_set_speed(Monitor *mon, const QDict *qdict)
 {
     int64_t value = qdict_get_int(qdict, "value");
diff --git a/hmp.h b/hmp.h
index 0876ec03..03341ca6 100644
--- a/hmp.h
+++ b/hmp.h
@@ -68,6 +68,8 @@ void hmp_migrate_set_speed(Monitor *mon, const QDict *qdict);
 void hmp_migrate_set_capability(Monitor *mon, const QDict *qdict);
 void hmp_migrate_set_parameter(Monitor *mon, const QDict *qdict);
 void hmp_migrate_set_cache_size(Monitor *mon, const QDict *qdict);
+void hmp_migrate_set_thread_cpumask(Monitor *mon, const QDict *qdict);
+void hmp_migrate_set_thread_priority(Monitor *mon, const QDict *qdict);
 void hmp_client_migrate_info(Monitor *mon, const QDict *qdict);
 void hmp_migrate_start_postcopy(Monitor *mon, const QDict *qdict);
 void hmp_set_password(Monitor *mon, const QDict *qdict);
diff --git a/migration/migration.c b/migration/migration.c
index 27218812..a4da35d9 100644
--- a/migration/migration.c
+++ b/migration/migration.c
@@ -37,6 +37,17 @@
 #include "io/channel-buffer.h"
 #include "io/channel-tls.h"
 
+#include <sched.h>
+
+//#define DEBUG
+
+#if DEBUG
+#define DPRINTF(fmt, ...) \
+        printf(fmt, ## __VA_ARGS__)
+#else
+#define DPRINTF(fmt, ...)
+#endif
+
 #define MAX_THROTTLE  (32 << 20)      /* Migration transfer speed throttling */
 
 /* Amount of time to allocate to each "chunk" of bandwidth-throttled
@@ -61,6 +72,11 @@
 static NotifierList migration_state_notifiers =
     NOTIFIER_LIST_INITIALIZER(migration_state_notifiers);
 
+/* variables for pinning the migration thread to a CPU and assing the 
+ * realtime priority to it */
+static uint64_t migrate_thread_cpumask=0;
+static uint64_t migrate_thread_priority=0;
+
 static bool deferred_incoming;
 
 /*
@@ -1158,6 +1174,32 @@ void qmp_migrate_set_cache_size(int64_t value, Error **errp)
     s->xbzrle_cache_size = new_size;
 }
 
+void qmp_migrate_set_thread_cpumask(int64_t value, Error **errp)
+{
+    /* Check for truncation */
+    if (value != (size_t)value) {
+        error_setg(errp, QERR_INVALID_PARAMETER_VALUE, "Migration thread CPU Mask",
+                  "exceeding address space");
+        return;
+    }
+    /*resize the value */
+    value >>= 20; /*Magic */
+    migrate_thread_cpumask = value; 
+}
+
+void qmp_migrate_set_thread_priority(int64_t value, Error **errp)
+{
+    /* Check for truncation */
+    if (value != (size_t)value) {
+        error_setg(errp, QERR_INVALID_PARAMETER_VALUE, "Migration thread Priority",
+                  "exceeding address space");
+        return;
+    }
+    /*resize the value */
+    value >>= 20;
+    migrate_thread_priority = value;
+}
+
 int64_t qmp_query_migrate_cache_size(Error **errp)
 {
     return migrate_xbzrle_cache_size();
@@ -1717,6 +1759,20 @@ static void *migration_thread(void *opaque)
     uint64_t page_rate = 0;
     static uint64_t page_count =0;
 
+    /* Bind Migration thread to the processor specified by the user */
+    if (sched_setaffinity(0, sizeof(migrate_thread_cpumask), (cpu_set_t *)&migrate_thread_cpumask) <0) {
+        DPRINTF("Error setting user input affinity. Switching to default.\n");
+    }
+
+    /* Change the realtime priority of the migration thread specified by the user */
+    struct sched_param schedp;
+    memset(&schedp, 0, sizeof(schedp));
+    schedp.sched_priority = migrate_thread_priority;
+    if (sched_setscheduler(0, SCHED_FIFO, &schedp) < 0)
+         DPRINTF("Error setting user input priority. Switching to default.\n");
+
+    trace_migrate_thread(migrate_thread_cpumask, migrate_thread_priority);
+
     rcu_register_thread();
 
     qemu_savevm_state_header(s->to_dst_file);
@@ -1857,6 +1913,7 @@ static void *migration_thread(void *opaque)
         }
     }
 
+    /* free the memory resources allocated for the migration */
     if(s->state == MIGRATION_STATUS_COMPLETED) {
         qemu_savevm_state_free();
     }
diff --git a/migration/trace-events b/migration/trace-events
index c009303b..81ecab54 100644
--- a/migration/trace-events
+++ b/migration/trace-events
@@ -100,6 +100,7 @@ migration_thread_low_pending(uint64_t pending) "%" PRIu64
 migrate_state_too_big(void) ""
 migrate_transferred(uint64_t tranferred, uint64_t time_spent, double bandwidth, uint64_t size, uint64_t page_rate) "transferred %" PRIu64 " time_spent %" PRIu64 " bandwidth %g max_size %" PRId64 "page_rate %" PRIu64
 migrate_info(uint64_t expected_downtime, uint64_t pending_size) "expected_downtime %" PRIu64 " pending_size %" PRIu64 " bytes"
+migrate_thread(uint64_t migrate_thread_cpumask, uint64_t migrate_thread_priority) "migration Thread pinned to %" PRIu64 "with Priority %" PRIu64
 process_incoming_migration_co_end(int ret, int ps) "ret=%d postcopy-state=%d"
 process_incoming_migration_co_postcopy_end_main(void) ""
 migration_set_incoming_channel(void *ioc, const char *ioctype) "ioc=%p ioctype=%s"
diff --git a/qapi-schema.json b/qapi-schema.json
index 5658723b..5f1f4588 100644
--- a/qapi-schema.json
+++ b/qapi-schema.json
@@ -1832,6 +1832,36 @@
 { 'command': 'migrate_set_speed', 'data': {'value': 'int'} }
 
 ##
+# @migrate_set_thread_cpumask
+#
+# Set migration thread CPU mask.
+#
+# @value: CPU mask.
+#
+# Returns: nothing on success
+#
+# Notes: A value lesser than zero will be automatically round up to zero.
+#
+# Since: 0.14.0
+##
+{ 'command': 'migrate_set_thread_cpumask', 'data': {'value': 'int'} }
+
+##
+# @migrate_set_thread_priority
+#
+# Set migration thread Real Timer priority mask.
+#
+# @value: Thread Priority.
+#
+# Returns: nothing on success
+#
+# Notes: A value lesser than zero will be automatically round up to zero.
+#
+# Since: 0.14.0
+##
+{ 'command': 'migrate_set_thread_priority', 'data': {'value': 'int'} }
+
+##
 # @migrate-set-cache-size
 #
 # Set XBZRLE cache size
diff --git a/qmp-commands.hx b/qmp-commands.hx
index 6866264e..8a106358 100644
--- a/qmp-commands.hx
+++ b/qmp-commands.hx
@@ -784,6 +784,54 @@ Example:
 EQMP
 
     {
+        .name       = "migrate_set_thread_cpumask",
+        .args_type  = "value:o",
+        .mhandler.cmd_new = qmp_marshal_migrate_set_thread_cpumask
+    },
+
+SQMP
+migrate_set_thread_cpumask
+--------------------------
+
+Set CPU mask for the migration thread. Defaults to CPU 0 if no mask is specified.
+
+Arguments:
+
+- "value": CPU mask (json-int)
+
+Example:
+
+-> { "execute": "migrate_set_thread_cpumask", "arguments": { "value": 128 } }
+<- { "return": {} }
+
+EQMP
+   
+    {
+        .name       = "migrate_set_thread_priority",
+        .args_type  = "value:o",
+        .mhandler.cmd_new = qmp_marshal_migrate_set_thread_priority
+    },
+
+SQMP
+migrate_set_thread_priority
+---------------------------
+
+Set real time priority for the the migration thread. Defaults to no change migration 
+thread priority if not specified or out of range. Range [1-99].Scheduling policy 
+will always be - SCHED_FIFO".
+
+Arguments:
+
+- "value": Migration thread priority (json-int)
+
+Example:
+
+-> { "execute": "migrate_set_thread_priority", "arguments": { "value": 96 } }
+<- { "return": {} }
+
+EQMP
+
+    {
         .name       = "migrate_set_speed",
         .args_type  = "value:o",
         .mhandler.cmd_new = qmp_marshal_migrate_set_speed,
-- 
2.11.0

