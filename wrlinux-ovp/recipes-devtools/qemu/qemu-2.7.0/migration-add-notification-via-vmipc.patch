From a740d4ed96845b0ff8cd0caf485cd601679f8031 Mon Sep 17 00:00:00 2001
From: Jim Somerville <Jim.Somerville@windriver.com>
Date: Wed, 17 Sep 2014 16:41:31 -0400
Subject: [PATCH 16/18] migration add notification via vmipc

Migration start and end are sent to any listeners
using vmipc.

This is configurable and can be enabled/disabled.

Signed-off-by: Jim Somerville <Jim.Somerville@windriver.com>
[ywei: rebase to qemu-2.4]
Signed-off-by: Yunguo Wei <yunguo.wei@windriver.com>
[Adjust code context]
Upstream-Status: Pending
Signed-off-by: He Zhe <zhe.he@windriver.com>
---
 configure             | 18 ++++++++++++++++++
 migration/migration.c | 46 ++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 64 insertions(+)

diff --git a/configure b/configure
index 02647107..50ee6ec7 100755
--- a/configure
+++ b/configure
@@ -320,6 +320,7 @@ vhdx=""
 numa=""
 tcmalloc="no"
 jemalloc="no"
+vmipc=""
 
 # parse CC options first
 for opt do
@@ -1140,6 +1141,10 @@ for opt do
   ;;
   --disable-vhdx) vhdx="no"
   ;;
+  --enable-vmipc) vmipc="yes"
+  ;;
+  --disable-vmipc) vmipc="no"
+  ;;
   --disable-numa) numa="no"
   ;;
   --enable-numa) numa="yes"
@@ -1380,6 +1385,7 @@ disabled with --disable-FEATURE, default is enabled if available:
   libssh2         ssh block device support
   vhdx            support for the Microsoft VHDX image format
   numa            libnuma support
+  vmipc           virtual machine ipc support
   tcmalloc        tcmalloc support
   jemalloc        jemalloc support
 
@@ -4447,6 +4453,13 @@ if compile_prog "" "" ; then
 fi
 
 ########################################
+# check if vmipc is available.
+if test "$vmipc" = "yes" ; then
+  vmipc_libs="-lvmipc"
+  LIBS="$vmipc_libs $LIBS"
+fi
+
+########################################
 # check if ccache is interfering with
 # semantic analysis of macros
 
@@ -4894,6 +4907,7 @@ echo "lzo support       $lzo"
 echo "snappy support    $snappy"
 echo "bzip2 support     $bzip2"
 echo "NUMA host support $numa"
+echo "vmipc             $vmipc"
 echo "tcmalloc support  $tcmalloc"
 echo "jemalloc support  $jemalloc"
 echo "avx2 optimization $avx2_opt"
@@ -5554,6 +5568,10 @@ if test "$gcov" = "yes" ; then
   echo "GCOV=$gcov_tool" >> $config_host_mak
 fi
 
+if test "$vmipc" = "yes" ; then
+  echo "CONFIG_VMIPC=y" >> $config_host_mak
+fi
+
 # use included Linux headers
 if test "$linux" = "yes" ; then
   mkdir -p linux-headers
diff --git a/migration/migration.c b/migration/migration.c
index a4da35d9..b67eec00 100644
--- a/migration/migration.c
+++ b/migration/migration.c
@@ -39,6 +39,10 @@
 
 #include <sched.h>
 
+#ifdef CONFIG_VMIPC
+#include "vmipc.h"
+#endif
+
 //#define DEBUG
 
 #if DEBUG
@@ -357,6 +361,10 @@ static void process_incoming_migration_bh(void *opaque)
      */
     qemu_announce_self();
 
+#ifdef CONFIG_VMIPC
+    send_migration_msg(MIGRATION_END);
+#endif
+
     /* If global state section was not received or we are in running
        state, we need to obey autostart. Any other state is set with
        runstate_set. */
@@ -432,6 +440,40 @@ static void process_incoming_migration_co(void *opaque)
     qemu_bh_schedule(mis->bh);
 }
 
+#ifdef CONFIG_VMIPC
+static char vm1_shm_path[] = "/dev/shm/kvm_shmem";
+
+static ivshm_addr vm[MAX_NUM_VM];
+
+static void send_migration_msg(int migration_state)
+{
+    void *memptr = NULL;
+    vmipc_msg_t txmsg;
+
+    /* map in the shared memory */
+    memptr = ivshm_open(vm1_shm_path, IPC_TOTAL_MEM_SIZE, 0, 0);
+    if (memptr == (void *)-1) {
+       /* Missing the infrastructure, so this routine is just a nop */
+       return;
+    }
+    ivshm_clean(memptr, IPC_BUF_SIZE*2);
+    /* Only 1 VM capable for now */
+    vm[0].buf_local = (char *)(memptr);
+    vm[0].buf_remote = (char *)((char *)memptr + IPC_BUF_SIZE);
+
+    ipc_init(vm[0].buf_local, IPC_BUF_SIZE);
+    ipc_init(vm[0].buf_remote, IPC_BUF_SIZE);
+
+    memset(&txmsg, 0, sizeof(vmipc_msg_t));
+    txmsg.size = sizeof(int);  /* Only 1 int in message */
+    txmsg.reported_vm_state = migration_state;
+    txmsg.type = 0;
+    ipc_write(vm[0].buf_local, vm[0].buf_remote, (ipc_msg_t *) & txmsg);
+    /* unmap shared memory */
+    ivshm_close(memptr, IPC_TOTAL_MEM_SIZE);
+}  
+#endif
+
 void migration_fd_process_incoming(QEMUFile *f)
 {
     Coroutine *co = qemu_coroutine_create(process_incoming_migration_co, f);
@@ -1771,6 +1813,10 @@ static void *migration_thread(void *opaque)
     if (sched_setscheduler(0, SCHED_FIFO, &schedp) < 0)
          DPRINTF("Error setting user input priority. Switching to default.\n");
 
+#ifdef CONFIG_VMIPC
+    send_migration_msg(MIGRATION_START);
+#endif
+
     trace_migrate_thread(migrate_thread_cpumask, migrate_thread_priority);
 
     rcu_register_thread();
-- 
2.11.0

