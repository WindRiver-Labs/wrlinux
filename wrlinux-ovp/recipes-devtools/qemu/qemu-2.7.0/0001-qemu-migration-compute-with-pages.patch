From 4bb2d512c565df90066fac6beeb30c6c8ecd18af Mon Sep 17 00:00:00 2001
From: Mark Asselstine <mark.asselstine@windriver.com>
Date: Wed, 17 Dec 2014 18:51:52 +0000
Subject: [PATCH 08/18] qemu migration compute with pages

This patch is rebased for qemu-2.4, based on Mark Asselstine's patch for
qemu-2.2.

Signed-off-by: Yunguo Wei <yunguo.wei@windriver.com>
[Adjust code context]
Upstream-Status: Pending
Signed-off-by: He Zhe <zhe.he@windriver.com>
---
 migration/migration.c  | 17 +++++++++++++++--
 migration/ram.c        |  4 ++--
 migration/trace-events |  3 ++-
 3 files changed, 19 insertions(+), 5 deletions(-)

diff --git a/migration/migration.c b/migration/migration.c
index 955d5ee3..82d0ed85 100644
--- a/migration/migration.c
+++ b/migration/migration.c
@@ -1714,6 +1714,8 @@ static void *migration_thread(void *opaque)
     bool entered_postcopy = false;
     /* The active state we expect to be in; ACTIVE or POSTCOPY_ACTIVE */
     enum MigrationStatus current_active_state = MIGRATION_STATUS_ACTIVE;
+    uint64_t page_rate = 0;
+    static uint64_t page_count =0;
 
     rcu_register_thread();
 
@@ -1792,18 +1794,29 @@ static void *migration_thread(void *opaque)
             uint64_t transferred_bytes = qemu_ftell(s->to_dst_file) -
                                          initial_bytes;
             uint64_t time_spent = current_time - initial_time;
+
+            if (migrate_use_xbzrle()) {
+                page_rate = (norm_mig_pages_transferred() + xbzrle_mig_pages_transferred()) - page_count;
+                page_count = norm_mig_pages_transferred() + xbzrle_mig_pages_transferred();
+            } else {
+                page_rate = norm_mig_pages_transferred()-page_count;
+                page_count = norm_mig_pages_transferred();
+            }
+
             double bandwidth = (double)transferred_bytes / time_spent;
-            max_size = bandwidth * migrate_max_downtime() / 1000000;
+            double page_bandwidth = page_rate / time_spent;
+            max_size = page_bandwidth * migrate_max_downtime() / 1000000;
 
             s->mbps = (((double) transferred_bytes * 8.0) /
                     ((double) time_spent / 1000.0)) / 1000.0 / 1000.0;
 
             trace_migrate_transferred(transferred_bytes, time_spent,
-                                      bandwidth, max_size);
+                                      bandwidth, max_size, page_rate);
             /* if we haven't sent anything, we don't want to recalculate
                10000 is a small enough number for our purposes */
             if (s->dirty_bytes_rate && transferred_bytes > 10000) {
                 s->expected_downtime = s->dirty_bytes_rate / bandwidth;
+                trace_migrate_info(s->expected_downtime, pending_size);
             }
 
             qemu_file_reset_rate_limit(s->to_dst_file);
diff --git a/migration/ram.c b/migration/ram.c
index a3d70c4c..1e7b8402 100644
--- a/migration/ram.c
+++ b/migration/ram.c
@@ -2067,7 +2067,7 @@ static void ram_save_pending(QEMUFile *f, void *opaque, uint64_t max_size,
 {
     uint64_t remaining_size;
 
-    remaining_size = ram_save_remaining() * TARGET_PAGE_SIZE;
+    remaining_size = ram_save_remaining();
 
     if (!migration_in_postcopy(migrate_get_current()) &&
         remaining_size < max_size) {
@@ -2076,7 +2076,7 @@ static void ram_save_pending(QEMUFile *f, void *opaque, uint64_t max_size,
         migration_bitmap_sync();
         rcu_read_unlock();
         qemu_mutex_unlock_iothread();
-        remaining_size = ram_save_remaining() * TARGET_PAGE_SIZE;
+        remaining_size = ram_save_remaining();
     }
 
     /* We can do postcopy, and all the data is postcopiable */
diff --git a/migration/trace-events b/migration/trace-events
index dfee75ab..c009303b 100644
--- a/migration/trace-events
+++ b/migration/trace-events
@@ -98,7 +98,8 @@ migrate_global_state_post_load(const char *state) "loaded state: %s"
 migrate_global_state_pre_save(const char *state) "saved state: %s"
 migration_thread_low_pending(uint64_t pending) "%" PRIu64
 migrate_state_too_big(void) ""
-migrate_transferred(uint64_t tranferred, uint64_t time_spent, double bandwidth, uint64_t size) "transferred %" PRIu64 " time_spent %" PRIu64 " bandwidth %g max_size %" PRId64
+migrate_transferred(uint64_t tranferred, uint64_t time_spent, double bandwidth, uint64_t size, uint64_t page_rate) "transferred %" PRIu64 " time_spent %" PRIu64 " bandwidth %g max_size %" PRId64 "page_rate %" PRIu64
+migrate_info(uint64_t expected_downtime, uint64_t pending_size) "expected_downtime %" PRIu64 " pending_size %" PRIu64 " bytes"
 process_incoming_migration_co_end(int ret, int ps) "ret=%d postcopy-state=%d"
 process_incoming_migration_co_postcopy_end_main(void) ""
 migration_set_incoming_channel(void *ioc, const char *ioctype) "ioc=%p ioctype=%s"
-- 
2.11.0

