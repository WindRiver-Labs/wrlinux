From 16a3c5f3db21f609160f80135888664ef4805ab8 Mon Sep 17 00:00:00 2001
From: Jim Somerville <Jim.Somerville@windriver.com>
Date: Mon, 14 Apr 2014 16:43:05 -0400
Subject: [PATCH 2/5] pci-assign: Make host irq to vcpu affinity

    Based upon qemu-kvm commit 1ba2612d057ea34f505bb1d0ee9601aef705ca6d
    [
     If a guest sets the affinity of a assigned device interrupt to a
     particular vcpu and the vcpu is pinned to a physical core, then direct
     the host interrupt to that physical core to avoid IPIs.

     Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    ]

Signed-off-by: Jim Somerville <Jim.Somerville@windriver.com>
[ywei: fix context conflicts in:
	include/standard-headers/linux/pci_regs.h
	hw/i386/kvm/pci-assign.c
]
Signed-off-by: Yunguo Wei <yunguo.wei@windriver.com>
[Fix context conflict in linux-headers/linux/kvm.h]
Upstream-Status: Pending
Signed-off-by: He Zhe <zhe.he@windriver.com>
---
 cpus.c                                    |  5 ++
 hw/i386/kvm/pci-assign.c                  | 89 ++++++++++++++++++++++++++++++-
 include/standard-headers/linux/pci_regs.h |  3 ++
 include/sysemu/cpus.h                     |  1 +
 linux-headers/linux/kvm.h                 |  7 +++
 5 files changed, 103 insertions(+), 2 deletions(-)

diff --git a/cpus.c b/cpus.c
index ffddb1a0..17d988e2 100644
--- a/cpus.c
+++ b/cpus.c
@@ -1021,6 +1021,11 @@ static void qemu_init_sigbus(void)
 static cpu_set_t vcpu_affinity[1024];
 static int vcpu_priority[1024];
 
+cpu_set_t *qemu_kvm_vcpu_get_affinity(int vcpu)
+{
+	return vcpu_affinity + vcpu;
+}
+
 static void qemu_kvm_vcpu_sched_init(CPUState *env)
 {
     int idx = env->cpu_index;
diff --git a/hw/i386/kvm/pci-assign.c b/hw/i386/kvm/pci-assign.c
index 33e20cb3..14ea8827 100644
--- a/hw/i386/kvm/pci-assign.c
+++ b/hw/i386/kvm/pci-assign.c
@@ -36,6 +36,7 @@
 #include "hw/pci/msi.h"
 #include "kvm_i386.h"
 #include "hw/pci/pci-assign.h"
+#include "sysemu/cpus.h"
 
 /* From linux/ioport.h */
 #define IORESOURCE_IO       0x00000100  /* Resource type */
@@ -75,8 +76,10 @@ typedef struct AssignedDevRegion {
     PCIRegion *region;
 } AssignedDevRegion;
 
-#define ASSIGNED_DEVICE_PREFER_MSI_BIT  0
-#define ASSIGNED_DEVICE_SHARE_INTX_BIT  1
+
+#define ASSIGNED_DEVICE_PREFER_MSI_BIT		0
+#define ASSIGNED_DEVICE_SHARE_INTX_BIT		1
+#define ASSIGNED_DEVICE_VCPU_AFFINITY_BIT	2
 
 #define ASSIGNED_DEVICE_PREFER_MSI_MASK (1 << ASSIGNED_DEVICE_PREFER_MSI_BIT)
 #define ASSIGNED_DEVICE_SHARE_INTX_MASK (1 << ASSIGNED_DEVICE_SHARE_INTX_BIT)
@@ -119,6 +122,8 @@ typedef struct AssignedDevice {
     uint8_t emulate_config_write[PCI_CONFIG_SPACE_SIZE];
     int msi_virq_nr;
     int *msi_virq;
+    int msix_host_irqs[64];
+    uint32_t msix_host_affinity[64];
     MSIXTableEntry *msix_table;
     hwaddr msix_table_addr;
     uint16_t msix_table_size;
@@ -947,6 +952,10 @@ static void assigned_dev_update_irq_routing(PCIDevice *dev)
     }
 }
 
+static void kvm_msix_update_affinity(AssignedDevice *dev, int entry, int dest);
+
+static bool assigned_dev_msix_masked(MSIXTableEntry *entry);
+
 static void assigned_dev_update_msi(PCIDevice *pci_dev)
 {
     AssignedDevice *assigned_dev = PCI_ASSIGN(pci_dev);
@@ -1135,6 +1144,22 @@ static void assigned_dev_update_msix(PCIDevice *pci_dev)
         assigned_dev->intx_route.mode = PCI_INTX_DISABLED;
         assigned_dev->intx_route.irq = -1;
         assigned_dev->assigned_irq_type = ASSIGNED_IRQ_MSIX;
+        {
+            /* Assign affinity to all the enabled irqs
+               for the assigned device.
+             */
+            MSIXTableEntry *entry = assigned_dev->msix_table;
+            int i;
+
+            for (i = 0; i < assigned_dev->msix_max; i++, entry++) {
+                if (assigned_dev_msix_masked(entry)) {
+                    continue;
+                }
+                kvm_msix_update_affinity(assigned_dev, i,
+                   (entry->addr_lo & MSI_ADDR_DEST_ID_MASK)
+                   >> MSI_ADDR_DEST_ID_SHIFT);
+            }
+        }
     } else {
         Error *local_err = NULL;
 
@@ -1152,6 +1177,14 @@ static uint32_t assigned_dev_pci_read_config(PCIDevice *pci_dev,
     uint32_t virt_val = pci_default_read_config(pci_dev, address, len);
     uint32_t real_val, emulate_mask, full_emulation_mask;
 
+    if (assigned_dev->cap.available & ASSIGNED_DEVICE_CAP_MSI) {
+        uint32_t msi_start = pci_dev->msi_cap;
+        uint32_t msi_end = msi_start + PCI_MSI_DATA_64 + 3;
+
+	if (address >= msi_start && (address + len) < msi_end)
+            return virt_val;
+    }
+
     emulate_mask = 0;
     memcpy(&emulate_mask, assigned_dev->emulate_config_read + address, len);
     emulate_mask = le32_to_cpu(emulate_mask);
@@ -1518,6 +1551,53 @@ static int assigned_device_pci_cap_init(PCIDevice *pci_dev, Error **errp)
     return 0;
 }
 
+static int assign_query_msix_irq(AssignedDevice *dev, int entry)
+{
+    if (dev->msix_host_irqs[entry] <= 0) {
+        struct kvm_assigned_msix_query_irq query;
+
+        query.assigned_dev_id = dev->dev_id;
+        query.entry = entry;
+        dev->msix_host_irqs[entry] =
+                  kvm_vm_ioctl(kvm_state, KVM_ASSIGN_QUERY_IRQ, &query);
+    }
+    return dev->msix_host_irqs[entry];
+}
+
+static void kvm_msix_update_affinity(AssignedDevice *dev, int entry, int dest)
+{
+    char buf[16], fnam[256];
+    int irq, fd, i;
+    cpu_set_t *msk;
+
+    if (!(dev->features & ASSIGNED_DEVICE_VCPU_AFFINITY_BIT))
+        return;
+
+    irq = assign_query_msix_irq(dev, entry);
+    if (irq <= 0)
+        return;
+
+    msk = qemu_kvm_vcpu_get_affinity(dest);
+    if (!CPU_COUNT(msk))
+        return;
+
+    for (i = 0; i < CPU_SETSIZE; i++) {
+        if (CPU_ISSET(i, msk))
+             break;
+    }
+
+    sprintf(buf, "%d\n", i);
+    sprintf(fnam, "/proc/irq/%d/smp_affinity_list", irq);
+    fd = open(fnam, O_RDWR);
+    if (fd < 0)
+        return;
+    i = write(fd, buf, strlen(buf));
+    if (i < 0)
+        perror("irq affinity setting failed");
+    close(fd);
+    dev->msix_host_affinity[entry] = dest;
+}
+
 static uint64_t
 assigned_dev_msix_mmio_read(void *opaque, hwaddr addr,
                             unsigned size)
@@ -1592,6 +1672,7 @@ static void assigned_dev_msix_mmio_write(void *opaque, hwaddr addr,
                     error_report("Error updating irq routing entry (%d)", ret);
                 }
                 kvm_irqchip_commit_routes(kvm_state);
+                kvm_msix_update_affinity(adev, i, (entry->addr_lo & MSI_ADDR_DEST_ID_MASK) >> MSI_ADDR_DEST_ID_SHIFT);
             }
         }
     }
@@ -1799,6 +1880,8 @@ static void assigned_realize(struct PCIDevice *pci_dev, Error **errp)
         goto assigned_out;
     }
 
+    memset(dev->msix_host_affinity, 0xff, sizeof(dev->msix_host_affinity));
+
     assigned_dev_load_option_rom(dev);
 
     return;
@@ -1838,6 +1921,8 @@ static Property assigned_dev_properties[] = {
                     ASSIGNED_DEVICE_PREFER_MSI_BIT, false),
     DEFINE_PROP_BIT("share_intx", AssignedDevice, features,
                     ASSIGNED_DEVICE_SHARE_INTX_BIT, true),
+    DEFINE_PROP_BIT("vcpuaffine", AssignedDevice, features,
+                        ASSIGNED_DEVICE_VCPU_AFFINITY_BIT, true),
     DEFINE_PROP_STRING("configfd", AssignedDevice, configfd_name),
     DEFINE_PROP_END_OF_LIST(),
 };
diff --git a/include/standard-headers/linux/pci_regs.h b/include/standard-headers/linux/pci_regs.h
index c22d3eba..19bb1341 100644
--- a/include/standard-headers/linux/pci_regs.h
+++ b/include/standard-headers/linux/pci_regs.h
@@ -317,6 +317,9 @@
 #define PCI_MSI_MASK_64		16	/* Mask bits register for 64-bit devices */
 #define PCI_MSI_PENDING_64	20	/* Pending intrs for 64-bit devices */
 
+#define MSI_ADDR_DEST_ID_SHIFT	12
+#define MSI_ADDR_DEST_ID_MASK	0x00ffff0
+
 /* MSI-X registers */
 #define PCI_MSIX_FLAGS		2	/* Message Control */
 #define  PCI_MSIX_FLAGS_QSIZE	0x07FF	/* Table size */
diff --git a/include/sysemu/cpus.h b/include/sysemu/cpus.h
index a6e000cf..06580366 100644
--- a/include/sysemu/cpus.h
+++ b/include/sysemu/cpus.h
@@ -31,6 +31,7 @@ void cpu_synchronize_all_pre_loadvm(void);
 
 void qtest_clock_warp(int64_t dest);
 void vcpu_parse(const char *optarg);
+cpu_set_t *qemu_kvm_vcpu_get_affinity(int vcpu);
 
 #ifndef CONFIG_USER_ONLY
 /* vl.c */
diff --git a/linux-headers/linux/kvm.h b/linux-headers/linux/kvm.h
index 7971a4f8..959bbeae 100644
--- a/linux-headers/linux/kvm.h
+++ b/linux-headers/linux/kvm.h
@@ -1112,6 +1112,8 @@ struct kvm_arm_device_addr {
 	__u64 addr;
 };
 
+#define KVM_ASSIGN_QUERY_IRQ      _IO(KVMIO,  0xe8)
+
 /*
  * Device control API, available with KVM_CAP_DEVICE_CTRL
  */
@@ -1416,4 +1418,9 @@ struct kvm_assigned_msix_entry {
 #define KVM_ARM_DEV_EL1_PTIMER		(1 << 1)
 #define KVM_ARM_DEV_PMU			(1 << 2)
 
+struct kvm_assigned_msix_query_irq {
+	__u32 assigned_dev_id;
+	__u32 entry;
+};
+
 #endif /* __LINUX_KVM_H */
-- 
2.13.3

