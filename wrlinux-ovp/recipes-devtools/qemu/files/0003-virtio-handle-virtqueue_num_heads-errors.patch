From 88f1ab06e0b54621da5a868eaa085a360121f892 Mon Sep 17 00:00:00 2001
From: Shan Hai <shan.hai@windriver.com>
Date: Thu, 4 Aug 2016 10:49:17 +0800
Subject: [PATCH 13/18] virtio: handle virtqueue_num_heads() errors

If the avail ring index is bogus virtqueue_num_heads() must return
-EINVAL.

The only caller is virtqueue_get_avail_bytes().  Return saying no bytes
are available when virtqueue_num_heads() fails.

Commit take from [PATCH v3 09/10] of "virtio: avoid exit() when device
        enters invalid states" found at
https://lists.gnu.org/archive/html/qemu-devel/2016-04/msg01978.html

Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
Signed-off-by: Shan Hai <shan.hai@windriver.com>
[Adjust code context]
Upstream-Status: Backport [4355c1abcaedd64a18d627284a3b7e54acb00714]
Signed-off-by: He Zhe <zhe.he@windriver.com>
---
 hw/virtio/virtio.c | 12 +++++++++---
 1 file changed, 9 insertions(+), 3 deletions(-)

diff --git a/hw/virtio/virtio.c b/hw/virtio/virtio.c
index 14fe6c40..690b6a50 100644
--- a/hw/virtio/virtio.c
+++ b/hw/virtio/virtio.c
@@ -325,9 +325,9 @@ static int virtqueue_num_heads(VirtQueue *vq, unsigned int idx)
 
     /* Check it isn't doing very strange things with descriptor numbers. */
     if (num_heads > vq->vring.num) {
-        error_report("Guest moved used index from %u to %u",
+        virtio_error(vq->vdev, "Guest moved used index from %u to %u",
                      idx, vq->shadow_avail_idx);
-        exit(1);
+        return -EINVAL;
     }
     /* On success, callers read a descriptor at vq->last_avail_idx.
      * Make sure descriptor read does not bypass avail index read. */
@@ -385,11 +385,12 @@ void virtqueue_get_avail_bytes(VirtQueue *vq, unsigned int *in_bytes,
 {
     unsigned int idx;
     unsigned int total_bufs, in_total, out_total;
+    int rc;
 
     idx = vq->last_avail_idx;
 
     total_bufs = in_total = out_total = 0;
-    while (virtqueue_num_heads(vq, idx)) {
+    while ((rc = virtqueue_num_heads(vq, idx)) > 0) {
         VirtIODevice *vdev = vq->vdev;
         unsigned int max, num_bufs, indirect = 0;
         VRingDesc desc;
@@ -444,6 +445,11 @@ void virtqueue_get_avail_bytes(VirtQueue *vq, unsigned int *in_bytes,
         else
             total_bufs++;
     }
+
+    if (rc < 0) {
+        goto err;
+    }
+
 done:
     if (in_bytes) {
         *in_bytes = in_total;
-- 
2.11.0

