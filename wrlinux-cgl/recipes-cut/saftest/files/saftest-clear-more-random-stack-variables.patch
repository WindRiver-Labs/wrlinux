Subject: [PATCH] saftest: clear random stack variables

Local variables from stack init with random values. This will make
functions works abnormally and return SA_ERR_HPI_INVALID_DATA.

Upstream-Status: pending

Signed-off-by: Xin Ouyang <Xin.Ouyang@windriver.com>
Signed-off-by: Jackie Huang <jackie.huang@windriver.com>
---
 .../src/sensor/saHpiSensorThresholdsSet/1.c        |    1 +
 .../src/sensor/saHpiSensorThresholdsSet/2.c        |    1 +
 .../src/sensor/saHpiSensorThresholdsSet/7.c        |    1 +
 .../src/sensor/saHpiSensorThresholdsSet/9.c        |    1 +
 .../src/control/saHpiControlGet/3.c                |    2 ++
 5 files changed, 6 insertions(+)

diff --git a/HPI-B.01.01/src/sensor/saHpiSensorThresholdsSet/1.c b/HPI-B.01.01/src/sensor/saHpiSensorThresholdsSet/1.c
index d573e26..7032a4b 100644
--- a/HPI-B.01.01/src/sensor/saHpiSensorThresholdsSet/1.c
+++ b/HPI-B.01.01/src/sensor/saHpiSensorThresholdsSet/1.c
@@ -40,6 +40,7 @@ int Test_Rdr(SaHpiSessionIdT session,
 	//
 	//  Call saHpiSensorThresholdsSet passing in a bad ResouceId
 	//
+	memset(&threshold, 0, sizeof(threshold));
 	status = saHpiSensorThresholdsSet(session,
 					  INVALID_RESOURCE_ID,
 					  s_num, &threshold);
diff --git a/HPI-B.01.01/src/sensor/saHpiSensorThresholdsSet/2.c b/HPI-B.01.01/src/sensor/saHpiSensorThresholdsSet/2.c
index 6372315..04f2a10 100644
--- a/HPI-B.01.01/src/sensor/saHpiSensorThresholdsSet/2.c
+++ b/HPI-B.01.01/src/sensor/saHpiSensorThresholdsSet/2.c
@@ -40,6 +40,7 @@ int Test_Rdr(SaHpiSessionIdT session,
 	//
 	//  Call saHpiSensorThresholdsSet passing in a bad SessionId
 	//
+	memset(&threshold, 0, sizeof(threshold));
 	status = saHpiSensorThresholdsSet(INVALID_SESSION_ID,
 					  resourceId, s_num, &threshold);
 
diff --git a/HPI-B.01.01/src/sensor/saHpiSensorThresholdsSet/7.c b/HPI-B.01.01/src/sensor/saHpiSensorThresholdsSet/7.c
index ecaf9be..4bc1c47 100644
--- a/HPI-B.01.01/src/sensor/saHpiSensorThresholdsSet/7.c
+++ b/HPI-B.01.01/src/sensor/saHpiSensorThresholdsSet/7.c
@@ -43,6 +43,7 @@ int Test_Rdr(SaHpiSessionIdT session,
 	//  Call saHpiSensorThresholdsSet passing in a bad ResouceId
 	//
 
+	memset(&threshold, 0, sizeof(threshold));
 	status = saHpiSensorThresholdsSet(session,
 					  resourceId,
 					  UNLIKELY_SENSOR_NUM, &threshold);
diff --git a/HPI-B.01.01/src/sensor/saHpiSensorThresholdsSet/9.c b/HPI-B.01.01/src/sensor/saHpiSensorThresholdsSet/9.c
index c4af046..a6c27b6 100644
--- a/HPI-B.01.01/src/sensor/saHpiSensorThresholdsSet/9.c
+++ b/HPI-B.01.01/src/sensor/saHpiSensorThresholdsSet/9.c
@@ -57,6 +57,7 @@ int Test_Rdr(SaHpiSessionIdT session,
 		//  Call saHpiSensorThresholdsSet on a sensor which thresholds
 		//  are not accessible.
 		//
+		memset(&threshold, 0, sizeof(threshold));
 		status = saHpiSensorThresholdsSet(session,
 						  resourceId,
 						  s_num, &threshold);
diff --git a/HPI-B.01.01/src/control/saHpiControlGet/3.c b/HPI-B.01.01/src/control/saHpiControlGet/3.c
index 7b1b10d..605376e 100644
--- a/HPI-B.01.01/src/control/saHpiControlGet/3.c
+++ b/HPI-B.01.01/src/control/saHpiControlGet/3.c
@@ -52,6 +52,8 @@ int processCtrlRdr(SaHpiSessionIdT sessionId,

 	if (!ctrlRec->WriteOnly) {

+		memset(&ctrlState, 0, sizeof(ctrlState));
+		memset(&ctrlMode, 0, sizeof(ctrlMode));
 		status = saHpiControlGet(sessionId, resourceId, ctrlNum,
 					 &ctrlMode, &ctrlState);

-- 
1.7.9.5

