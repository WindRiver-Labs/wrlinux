From c11d6ee0f6c09c88cf51cd5dac94bada8c7f1f80 Mon Sep 17 00:00:00 2001
From: Jin Li <jin.li@windriver.com>
Date: Wed, 18 Dec 2013 14:25:14 +0800
Subject: [PATCH 14/15] Fix invalid argument error for POSIX test case pi_test

Upstream-Status: Pending

When run the pi_test on the target with more than 8 cpus

1. The test pi_test_pitest-* failed with

error - UNRESOLVED: pthread_create: 22 Invalid argument

From the user guide of pthread_create, we can see:

EINVAL
    The user specified a stack address and the size of the area was not large
enough to meet this processor's minimum stack requirements.

The created pthreads in the process eat up all the stack and therefore new
pthread returened with error EINVAL.

2. There is NULL thread as follows:

EVENT 0.001154 (null) Thread Started
EVENT 0.001167 (null) Thread Stopped

The size of struct thread_param tp[] should be allocated based on the number of
cpu instead of being given a fix value - 6

Signed-off-by: Jin Li <jin.li@windriver.com>
---
 .../functional/threads/include/pitest.h            | 30 ++++++++++++++
 .../functional/threads/pi_test/pitest-1.c          | 44 +++++++++-----------
 .../functional/threads/pi_test/pitest-2.c          | 47 +++++++++-------------
 .../functional/threads/pi_test/pitest-3.c          | 47 +++++++++-------------
 .../functional/threads/pi_test/pitest-4.c          | 45 +++++++++------------
 .../functional/threads/pi_test/pitest-5.c          | 44 +++++++++-----------
 .../functional/threads/pi_test/pitest-6.c          | 46 +++++++++------------
 7 files changed, 147 insertions(+), 156 deletions(-)

diff --git a/testcases/open_posix_testsuite/functional/threads/include/pitest.h b/testcases/open_posix_testsuite/functional/threads/include/pitest.h
index dd7a48f..04693b4 100644
--- a/testcases/open_posix_testsuite/functional/threads/include/pitest.h
+++ b/testcases/open_posix_testsuite/functional/threads/include/pitest.h
@@ -13,6 +13,36 @@
 
 #define PROTOCOL                PTHREAD_PRIO_INHERIT
 
+struct thread_param
+{
+    int index;
+    volatile int stop;
+    int sleep_ms;
+    int priority;
+    int policy;
+    const char *name;
+    int cpu;
+    volatile unsigned futex;
+    volatile unsigned should_stall;
+    volatile unsigned progress;
+};
+struct thread_param* tp = NULL;
+
+void set_thread_param(int location, int index, volatile int stop, int sleep_ms, int priority, int policy, const char* name, int cpu, volatile unsigned futex, volatile unsigned should_stall, volatile unsigned progress)
+{
+
+    tp[location].index = index;
+    tp[location].stop = stop;
+    tp[location].sleep_ms = sleep_ms;
+    tp[location].priority = priority;
+    tp[location].policy = policy;
+    tp[location].name = name;
+    tp[location].cpu = cpu;
+    tp[location].futex = futex;
+    tp[location].should_stall = should_stall;
+    tp[location].progress = progress;
+}
+
 static inline
 double seconds_read(void)
 {
diff --git a/testcases/open_posix_testsuite/functional/threads/pi_test/pitest-1.c b/testcases/open_posix_testsuite/functional/threads/pi_test/pitest-1.c
index 11867fe..056dd03 100644
--- a/testcases/open_posix_testsuite/functional/threads/pi_test/pitest-1.c
+++ b/testcases/open_posix_testsuite/functional/threads/pi_test/pitest-1.c
@@ -52,35 +52,12 @@ pthread_mutex_t mutex;
 volatile int ts_stop = 0;
 volatile double base_time;
 
-struct thread_param {
-	int index;
-	volatile int stop;
-	int sleep_ms;
-	int priority;
-	int policy;
-	const char *name;
-	int cpu;
-	volatile unsigned futex;
-	volatile unsigned should_stall;
-	volatile unsigned progress;
-} tp[] = {
-	{
-	0, 0, 0, 1, SCHED_FIFO, "TL", 0, 0, 0, 0}, {
-	1, 0, 50, 2, SCHED_FIFO, "TP", 0, 0, 0, 0}, {
-	2, 0, 0, 3, SCHED_FIFO, "TF", 1, 0, 0, 0}, {
-	3, 0, 0, 3, SCHED_FIFO, "TF", 2, 0, 0, 0}, {
-	4, 0, 0, 3, SCHED_FIFO, "TF", 3, 0, 0, 0}, {
-	5, 0, 0, 3, SCHED_FIFO, "TF", 4, 0, 0, 0}, {
-	6, 0, 0, 3, SCHED_FIFO, "TF", 5, 0, 0, 0}, {
-	7, 0, 0, 3, SCHED_FIFO, "TF", 6, 0, 0, 0}
-};
-
 volatile unsigned do_work_dummy;
 void do_work(unsigned granularity_top, volatile unsigned *progress)
 {
 	unsigned granularity_cnt, i;
 	unsigned top = 5 * 1000 * 1000;
-	unsigned dummy = do_work_dummy;
+	volatile unsigned dummy = do_work_dummy;
 
 	for (granularity_cnt = 0; granularity_cnt < granularity_top;
 	     granularity_cnt++) {
@@ -232,7 +209,7 @@ int main(int argc, char **argv)
 {
 	pthread_mutexattr_t mutex_attr;
 	pthread_attr_t threadattr;
-	pthread_t threads[cpus - 1], threadsample, threadtp, threadtl, threadtb;
+	pthread_t *threads, threadsample, threadtp, threadtl, threadtb;
 
 	int multiplier = 1;
 	int i;
@@ -242,6 +219,23 @@ int main(int argc, char **argv)
 	cpus = sysconf(_SC_NPROCESSORS_ONLN);
 	base_time = seconds_read();
 
+	threads = malloc((cpus - 1) * sizeof(pthread_t));
+	if (threads == NULL) {
+		free(threads);
+		return -ENOMEM;
+	}
+
+	tp = malloc((cpus + 1) * sizeof(struct thread_param));
+	if (tp == NULL)	{
+		free(tp);
+		return -ENOMEM;
+	} else {
+		set_thread_param(0, 0, 0, 0, 1, SCHED_FIFO, "TL", 0, 0, 0, 0);
+		set_thread_param(1, 1, 0, 50, 2, SCHED_FIFO, "TP", 0, 0, 0, 0);
+		for(i = 1; i <= cpus-1; i++)
+			set_thread_param(i + 1, i + 1, 0, 100, 3, SCHED_FIFO, "TF", i, 0, 0, 0);
+	}
+
 	/* Initialize a mutex with PTHREAD_PRIO_INHERIT protocol */
 	mutex_attr_init(&mutex_attr);
 	mutex_init(&mutex, &mutex_attr);
diff --git a/testcases/open_posix_testsuite/functional/threads/pi_test/pitest-2.c b/testcases/open_posix_testsuite/functional/threads/pi_test/pitest-2.c
index dda51c3..bc13117 100644
--- a/testcases/open_posix_testsuite/functional/threads/pi_test/pitest-2.c
+++ b/testcases/open_posix_testsuite/functional/threads/pi_test/pitest-2.c
@@ -53,36 +53,12 @@ pthread_mutex_t mutex;
 volatile int ts_stop = 0;
 volatile double base_time;
 
-struct thread_param {
-	int index;
-	volatile int stop;
-	int sleep_ms;
-	int priority;
-	int policy;
-	const char *name;
-	int cpu;
-	volatile unsigned futex;
-	volatile unsigned should_stall;
-	volatile unsigned progress;
-} tp[] = {
-	{
-	0, 0, 0, 1, SCHED_FIFO, "TL", 0, 0, 0, 0}, {
-	1, 0, 500, 2, SCHED_FIFO, "TP1", 0, 0, 0, 0}, {
-	2, 0, 500, 5, SCHED_FIFO, "TP2", 0, 0, 0, 0}, {
-	3, 0, 0, 3, SCHED_FIFO, "TF", 1, 0, 0, 0}, {
-	4, 0, 0, 3, SCHED_FIFO, "TF", 2, 0, 0, 0}, {
-	5, 0, 0, 3, SCHED_FIFO, "TF", 3, 0, 0, 0}, {
-	6, 0, 0, 3, SCHED_FIFO, "TF", 4, 0, 0, 0}, {
-	7, 0, 0, 3, SCHED_FIFO, "TF", 5, 0, 0, 0}, {
-	8, 0, 0, 3, SCHED_FIFO, "TF", 6, 0, 0, 0}
-};
-
 volatile unsigned do_work_dummy;
 void do_work(unsigned granularity_top, volatile unsigned *progress)
 {
 	unsigned granularity_cnt, i;
 	unsigned top = 5 * 1000 * 1000;
-	unsigned dummy = do_work_dummy;
+	volatile unsigned dummy = do_work_dummy;
 
 	for (granularity_cnt = 0; granularity_cnt < granularity_top;
 	     granularity_cnt++) {
@@ -257,8 +233,7 @@ int main(int argc, char **argv)
 {
 	pthread_mutexattr_t mutex_attr;
 	pthread_attr_t threadattr;
-	pthread_t threads[cpus - 1];
-	pthread_t threadsample, threadtp, threadtl, threadtb1, threadtb2;
+	pthread_t *threads, threadsample, threadtp, threadtl, threadtb1, threadtb2;
 
 	time_t multiplier = 1;
 	int i;
@@ -268,6 +243,24 @@ int main(int argc, char **argv)
 	cpus = sysconf(_SC_NPROCESSORS_ONLN);
 	base_time = seconds_read();
 
+	threads = malloc((cpus - 1) * sizeof(pthread_t));
+	if (threads == NULL) {
+		free(threads);
+		return -ENOMEM;
+	}
+
+	tp = malloc((cpus + 2) * sizeof(struct thread_param));
+	if (tp == NULL)	{
+		free(tp);
+		return -ENOMEM;
+	} else {
+		set_thread_param(0, 0, 0, 0, 1, SCHED_FIFO, "TL", 0, 0, 0, 0);
+        set_thread_param(1, 1, 0, 100, 2, SCHED_FIFO, "TP1", 0, 0, 0, 0);
+        set_thread_param(2, 2, 0, 100, 5, SCHED_FIFO, "TP2", 0, 0, 0, 0);
+		for(i = 1; i <= cpus-1; i++)
+			set_thread_param(i + 2, i + 2, 0, 100, 3, SCHED_FIFO, "TF", i, 0, 0, 0);
+	}
+
 	/* Initialize a mutex with PTHREAD_PRIO_INHERIT protocol */
 	mutex_attr_init(&mutex_attr);
 	mutex_init(&mutex, &mutex_attr);
diff --git a/testcases/open_posix_testsuite/functional/threads/pi_test/pitest-3.c b/testcases/open_posix_testsuite/functional/threads/pi_test/pitest-3.c
index 5e925a5..402cde5 100644
--- a/testcases/open_posix_testsuite/functional/threads/pi_test/pitest-3.c
+++ b/testcases/open_posix_testsuite/functional/threads/pi_test/pitest-3.c
@@ -54,36 +54,12 @@ pthread_mutex_t mutex2;
 volatile int ts_stop = 0;
 volatile double base_time;
 
-struct thread_param {
-	int index;
-	volatile int stop;
-	int sleep_ms;
-	int priority;
-	int policy;
-	const char *name;
-	int cpu;
-	volatile unsigned futex;
-	volatile unsigned should_stall;
-	volatile unsigned progress;
-} tp[] = {
-	{
-	0, 0, 0, 1, SCHED_FIFO, "TL", 0, 0, 0, 0}, {
-	1, 0, 500, 2, SCHED_FIFO, "TP1", 0, 0, 0, 0}, {
-	1, 0, 500, 5, SCHED_FIFO, "TP2", 0, 0, 0, 0}, {
-	2, 0, 0, 3, SCHED_FIFO, "TF", 1, 0, 0, 0}, {
-	3, 0, 0, 3, SCHED_FIFO, "TF", 2, 0, 0, 0}, {
-	4, 0, 0, 3, SCHED_FIFO, "TF", 3, 0, 0, 0}, {
-	5, 0, 0, 3, SCHED_FIFO, "TF", 4, 0, 0, 0}, {
-	6, 0, 0, 3, SCHED_FIFO, "TF", 5, 0, 0, 0}, {
-	7, 0, 0, 3, SCHED_FIFO, "TF", 6, 0, 0, 0}
-};
-
 volatile unsigned do_work_dummy;
 void do_work(unsigned granularity_top, volatile unsigned *progress)
 {
 	unsigned granularity_cnt, i;
 	unsigned top = 5 * 1000 * 1000;
-	unsigned dummy = do_work_dummy;
+	volatile unsigned dummy = do_work_dummy;
 
 	for (granularity_cnt = 0; granularity_cnt < granularity_top;
 	     granularity_cnt++) {
@@ -268,8 +244,7 @@ int main(int argc, char **argv)
 {
 	pthread_mutexattr_t mutex_attr;
 	pthread_attr_t threadattr;
-	pthread_t threads[cpus - 1];
-	pthread_t threadsample, threadtp, threadtl, threadtb1, threadtb2;
+	pthread_t *threads, threadsample, threadtp, threadtl, threadtb1, threadtb2;
 
 	time_t multiplier = 1;
 	int i;
@@ -279,6 +254,24 @@ int main(int argc, char **argv)
 	base_time = seconds_read();
 	cpus = sysconf(_SC_NPROCESSORS_ONLN);
 
+	threads = malloc((cpus - 1) * sizeof(pthread_t));
+	if (threads == NULL) {
+		free(threads);
+		return -ENOMEM;
+	}
+
+	tp = malloc((cpus + 2) * sizeof(struct thread_param));
+	if (tp == NULL)	{
+		free(tp);
+		return -ENOMEM;
+	} else {
+		set_thread_param(0, 0, 0, 0, 1, SCHED_FIFO, "TL", 0, 0, 0, 0);
+		set_thread_param(1, 1, 0, 100, 2, SCHED_FIFO, "TP1", 0, 0, 0, 0);
+		set_thread_param(2, 1, 0, 100, 5, SCHED_FIFO, "TP2", 0, 0, 0, 0);
+		for(i = 1; i <= cpus-1; i++)
+			set_thread_param(i + 2, i + 1, 0, 100, 3, SCHED_FIFO, "TF", i, 0, 0, 0);
+	}
+
 	/* Initialize mutex1, mutex2 with PTHREAD_PRIO_INHERIT protocol */
 	mutex_attr_init(&mutex_attr);
 	mutex_init(&mutex1, &mutex_attr);
diff --git a/testcases/open_posix_testsuite/functional/threads/pi_test/pitest-4.c b/testcases/open_posix_testsuite/functional/threads/pi_test/pitest-4.c
index dc4bd02..12edb1e 100644
--- a/testcases/open_posix_testsuite/functional/threads/pi_test/pitest-4.c
+++ b/testcases/open_posix_testsuite/functional/threads/pi_test/pitest-4.c
@@ -55,35 +55,12 @@ pthread_mutex_t mutex2;
 volatile int ts_stop = 0;
 volatile double base_time;
 
-struct thread_param {
-	int index;
-	volatile int stop;
-	int sleep_ms;
-	int priority;
-	int policy;
-	const char *name;
-	int cpu;
-	volatile unsigned futex;
-	volatile unsigned should_stall;
-	volatile unsigned progress;
-} tp[] = {
-	{
-	0, 0, 0, 1, SCHED_FIFO, "TL", 0, 0, 0, 0}, {
-	1, 0, 100, 4, SCHED_FIFO, "TP", 0, 0, 0, 0}, {
-	2, 0, 0, 2, SCHED_FIFO, "TF", 1, 0, 0, 0}, {
-	3, 0, 0, 2, SCHED_FIFO, "TF", 2, 0, 0, 0}, {
-	4, 0, 0, 2, SCHED_FIFO, "TF", 3, 0, 0, 0}, {
-	5, 0, 0, 2, SCHED_FIFO, "TF", 4, 0, 0, 0}, {
-	6, 0, 0, 2, SCHED_FIFO, "TF", 5, 0, 0, 0}, {
-	7, 0, 0, 2, SCHED_FIFO, "TF", 6, 0, 0, 0}
-};
-
 volatile unsigned do_work_dummy;
 void do_work(unsigned granularity_top, volatile unsigned *progress)
 {
 	unsigned granularity_cnt, i;
 	unsigned top = 5 * 1000 * 1000;
-	unsigned dummy = do_work_dummy;
+	volatile unsigned dummy = do_work_dummy;
 
 	for (granularity_cnt = 0; granularity_cnt < granularity_top;
 	     granularity_cnt++) {
@@ -238,8 +215,7 @@ int main(int argc, char **argv)
 {
 	pthread_mutexattr_t mutex_attr;
 	pthread_attr_t threadattr;
-	pthread_t threads[cpus - 1];
-	pthread_t threadsample, threadtp, threadtl, threadtb1, threadtb2;
+	pthread_t *threads, threadsample, threadtp, threadtl, threadtb1, threadtb2;
 
 	time_t multiplier = 1;
 	int i;
@@ -249,6 +225,23 @@ int main(int argc, char **argv)
 	base_time = seconds_read();
 	cpus = sysconf(_SC_NPROCESSORS_ONLN);
 
+	threads = malloc((cpus - 1) * sizeof(pthread_t));
+	if (threads == NULL) {
+		free(threads);
+		return -ENOMEM;
+	}
+
+	tp = malloc((cpus + 1) * sizeof(struct thread_param));
+	if (tp == NULL)	{
+		free(tp);
+		return -ENOMEM;
+	} else {
+		set_thread_param(0, 0, 0, 0, 1, SCHED_FIFO, "TL", 0, 0, 0, 0);
+		set_thread_param(1, 1, 0, 100, 3, SCHED_FIFO, "TP", 0, 0, 0, 0);
+		for(i = 1; i <= cpus-1; i++)
+			set_thread_param(i + 1, i + 1, 0, 100, 4, SCHED_FIFO, "TF", i, 0, 0, 0);
+	}
+
 	/* Initialize mutex1, mutex2 with PTHREAD_PRIO_INHERIT protocol */
 	mutex_attr_init(&mutex_attr);
 	mutex_init(&mutex1, &mutex_attr);
diff --git a/testcases/open_posix_testsuite/functional/threads/pi_test/pitest-5.c b/testcases/open_posix_testsuite/functional/threads/pi_test/pitest-5.c
index 9540d06..c398248 100644
--- a/testcases/open_posix_testsuite/functional/threads/pi_test/pitest-5.c
+++ b/testcases/open_posix_testsuite/functional/threads/pi_test/pitest-5.c
@@ -53,35 +53,12 @@ volatile int ts_stop = 0;
 volatile double base_time;
 volatile int unlock_mutex = 0;
 
-struct thread_param {
-	int index;
-	volatile int stop;
-	int sleep_ms;
-	int priority;
-	int policy;
-	const char *name;
-	int cpu;
-	volatile unsigned futex;
-	volatile unsigned should_stall;
-	volatile unsigned progress;
-} tp[] = {
-	{
-	0, 0, 0, 1, SCHED_FIFO, "TL", 0, 0, 0, 0}, {
-	1, 0, 200, 2, SCHED_FIFO, "TP", 0, 0, 0, 0}, {
-	2, 0, 0, 3, SCHED_FIFO, "TF", 1, 0, 0, 0}, {
-	3, 0, 0, 3, SCHED_FIFO, "TF", 2, 0, 0, 0}, {
-	4, 0, 0, 3, SCHED_FIFO, "TF", 3, 0, 0, 0}, {
-	5, 0, 0, 3, SCHED_FIFO, "TF", 4, 0, 0, 0}, {
-	6, 0, 0, 3, SCHED_FIFO, "TF", 5, 0, 0, 0}, {
-	7, 0, 0, 3, SCHED_FIFO, "TF", 6, 0, 0, 0}
-};
-
 volatile unsigned do_work_dummy;
 void do_work(unsigned granularity_top, volatile unsigned *progress)
 {
 	unsigned granularity_cnt, i;
 	unsigned top = 5 * 1000 * 1000;
-	unsigned dummy = do_work_dummy;
+	volatile unsigned dummy = do_work_dummy;
 
 	for (granularity_cnt = 0; granularity_cnt < granularity_top;
 	     granularity_cnt++) {
@@ -256,7 +233,7 @@ int main(int argc, char **argv)
 {
 	pthread_mutexattr_t mutex_attr;
 	pthread_attr_t threadattr;
-	pthread_t threads[cpus - 1], threadsample, threadtp, threadtl, threadtb;
+	pthread_t *threads, threadsample, threadtp, threadtl, threadtb;
 	time_t multiplier = 1;
 	int i;
 	int rc;
@@ -265,6 +242,23 @@ int main(int argc, char **argv)
 	base_time = seconds_read();
 	cpus = sysconf(_SC_NPROCESSORS_ONLN);
 
+	threads = malloc((cpus - 1) * sizeof(pthread_t));
+	if (threads == NULL) {
+		free(threads);
+		return -ENOMEM;
+	}
+
+	tp = malloc((cpus + 1) * sizeof(struct thread_param));
+	if (tp == NULL)	{
+		free(tp);
+		return -ENOMEM;
+	} else {
+		set_thread_param(0, 0, 0, 0, 1, SCHED_FIFO, "TL", 0, 0, 0, 0);
+		set_thread_param(1, 1, 0, 200, 2, SCHED_FIFO, "TP", 0, 0, 0, 0);
+		for(i = 1; i <= cpus-1; i++)
+			set_thread_param(i + 1, i + 1, 0, 100, 3, SCHED_FIFO, "TF", i, 0, 0, 0);
+	}
+
 	/* Initialize a mutex with PTHREAD_PRIO_INHERIT protocol */
 	mutex_attr_init(&mutex_attr);
 	mutex_init(&mutex, &mutex_attr);
diff --git a/testcases/open_posix_testsuite/functional/threads/pi_test/pitest-6.c b/testcases/open_posix_testsuite/functional/threads/pi_test/pitest-6.c
index 19d6755..e3292f3 100644
--- a/testcases/open_posix_testsuite/functional/threads/pi_test/pitest-6.c
+++ b/testcases/open_posix_testsuite/functional/threads/pi_test/pitest-6.c
@@ -51,35 +51,12 @@ pthread_mutex_t mutex;
 volatile int ts_stop = 0;
 volatile double base_time;
 
-struct thread_param {
-	int index;
-	volatile int stop;
-	int sleep_ms;
-	int priority;
-	int policy;
-	const char *name;
-	int cpu;
-	volatile unsigned futex;
-	volatile unsigned should_stall;
-	volatile unsigned progress;
-} tp[] = {
-	{
-	0, 0, 0, 1, SCHED_FIFO, "TL", 0, 0, 0, 0}, {
-	1, 0, 200, 2, SCHED_FIFO, "TP", 0, 0, 0, 0}, {
-	2, 0, 0, 3, SCHED_FIFO, "TF", 1, 0, 0, 0}, {
-	3, 0, 0, 3, SCHED_FIFO, "TF", 2, 0, 0, 0}, {
-	4, 0, 0, 3, SCHED_FIFO, "TF", 3, 0, 0, 0}, {
-	5, 0, 0, 3, SCHED_FIFO, "TF", 4, 0, 0, 0}, {
-	6, 0, 0, 3, SCHED_FIFO, "TF", 5, 0, 0, 0}, {
-	7, 0, 0, 3, SCHED_FIFO, "TF", 6, 0, 0, 0}
-};
-
 volatile unsigned do_work_dummy;
 void do_work(unsigned granularity_top, volatile unsigned *progress)
 {
 	unsigned granularity_cnt, i;
 	unsigned top = 5 * 1000 * 1000;
-	unsigned dummy = do_work_dummy;
+	volatile unsigned dummy = do_work_dummy;
 
 	for (granularity_cnt = 0; granularity_cnt < granularity_top;
 	     granularity_cnt++) {
@@ -125,7 +102,7 @@ void *thread_fn(void *param)
 		}
 	}
 
-	DPRINTF(stdout, "#EVENT %f Thread %s Started\n",
+	DPRINTF(stdout, "#EVENT %f Thread %s Stopted\n",
 		seconds_read() - base_time, tp->name);
 	return NULL;
 }
@@ -232,7 +209,7 @@ int main(int argc, char **argv)
 	cpus = sysconf(_SC_NPROCESSORS_ONLN);
 	pthread_mutexattr_t mutex_attr;
 	pthread_attr_t threadattr;
-	pthread_t threads[cpus - 1], threadsample, threadtp, threadtl, threadtb;
+	pthread_t *threads, threadsample, threadtp, threadtl, threadtb;
 
 	time_t multiplier = 1;
 	int i;
@@ -242,6 +219,23 @@ int main(int argc, char **argv)
 	base_time = seconds_read();
 	cpus = sysconf(_SC_NPROCESSORS_ONLN);
 
+	threads = malloc((cpus - 1) * sizeof(pthread_t));
+	if (threads == NULL) {
+		free(threads);
+		return -ENOMEM;
+	}
+
+	tp = malloc((cpus + 1) * sizeof(struct thread_param));
+	if (tp == NULL)	{
+		free(tp);
+		return -ENOMEM;
+	} else {
+		set_thread_param(0, 0, 0, 0, 1, SCHED_FIFO, "TL", 0, 0, 0, 0);
+		set_thread_param(1, 1, 0, 200, 2, SCHED_FIFO, "TP", 0, 0, 0, 0);
+		for(i = 1; i <= cpus-1; i++)
+			set_thread_param(i + 1, i + 1, 0, 100, 3, SCHED_FIFO, "TF", i, 0, 0, 0);
+	}
+
 	/* Initialize a mutex with PTHREAD_PRIO_INHERIT protocol */
 	mutex_attr_init(&mutex_attr);
 	mutex_init(&mutex, &mutex_attr);
-- 
1.9.1

